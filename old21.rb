TEST = ARGV.delete('-t')
VERBOSE = ARGV.delete('-v')

rules = (ARGV.empty? ? DATA : ARGF).each_line.map(&:chomp)

rules = "../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#".each_line.map(&:chomp) if TEST

real_rules = rules.flat_map { |rul|
  l, r = rul.split('=>').map { |compacted|
    compacted.strip.split(?/).map { |rl| rl.chars.map { |x| x == ?# } }
  }

  bases = [l, l.map(&:reverse)]
  6.times { bases << bases[-2].transpose.map(&:reverse) }
  rf = r.flatten.freeze
  bases.map { |left| [left.flatten, rf] }
}.to_h

grid = [
  [false, true, false],
  [false, false, true],
  [true, true, true],
]

(TEST ? 2 : 18).times { |n|
  small_size, large_size = grid.size.even? ? [2, 3] : [3, 4]
  output_grid_size = grid.size / small_size * large_size
  output_grid = Array.new(output_grid_size) { Array.new(output_grid_size) }

  0.step(grid.size - 1, by: small_size).each { |y|
    0.step(grid.size - 1, by: small_size).each { |x|
      subgrid = []
      small_size.times { |yy|
        subgrid.concat(grid[y + yy][x, small_size])
      }

      translated = real_rules[subgrid]
      if VERBOSE
        puts "Start from #{y}, #{x} -> #{subgrid}"
        puts "Becomes #{translated}"
      end

      large_size.times { |yy|
        large_size.times { |xx|
          output_grid[y / small_size * large_size + yy][x / small_size * large_size + xx] = translated[yy * large_size + xx]
        }
      }
    }
  }

  grid = output_grid
  grid.each { |g|
    puts g.map { |x| x.nil? ? ?? : x ? ?# : ?. }.join
  } if VERBOSE
  puts grid.flatten.count(true) if n == 4
}

puts grid.flatten.count(true)

__END__
../.. => ##./###/...
#./.. => ..#/##./##.
##/.. => #.#/##./...
.#/#. => ##./###/###
##/#. => ###/.#./#.#
##/## => .#./.#./###
.../.../... => #.../.#.#/..##/#...
#../.../... => .##./#.##/##../##..
.#./.../... => ##../#.../.#.#/###.
##./.../... => .#.#/###./.#.#/.#..
#.#/.../... => .#.#/##../.#../###.
###/.../... => #.##/.##./..##/#.##
.#./#../... => #..#/...#/.###/.##.
##./#../... => .###/..#./#.../####
..#/#../... => ..../.#../#.##/....
#.#/#../... => ..##/.##./.##./....
.##/#../... => ###./#.../#.#./.#.#
###/#../... => .#../##.#/.#.#/..#.
.../.#./... => ####/##../..#./#..#
#../.#./... => ####/#.##/#..#/..#.
.#./.#./... => #.##/.#../.#../.#.#
##./.#./... => ..##/###./..../...#
#.#/.#./... => ...#/.#.#/.#../....
###/.#./... => ..../..#./#..#/##.#
.#./##./... => ##../.#.#/#.#./.#.#
##./##./... => ###./##.#/#.#./.##.
..#/##./... => ..#./.#.#/###./##.#
#.#/##./... => ##.#/.#../#.../#.#.
.##/##./... => ####/..../...#/#.##
###/##./... => ####/.###/.###/.###
.../#.#/... => .#.#/###./.##./.#..
#../#.#/... => #.##/#..#/#..#/##..
.#./#.#/... => ...#/##../..../#..#
##./#.#/... => #..#/.#../##.#/..##
#.#/#.#/... => ..../...#/..#./#..#
###/#.#/... => .##./#..#/...#/.##.
.../###/... => ..../#.##/.#../##..
#../###/... => .#.#/.###/###./#..#
.#./###/... => ...#/.#../###./.###
##./###/... => #..#/###./#.##/.#..
#.#/###/... => .#../##../###./.#.#
###/###/... => ###./.#.#/.##./###.
..#/.../#.. => ...#/#..#/###./.###
#.#/.../#.. => #.#./#.##/#.#./...#
.##/.../#.. => .#.#/#.#./..../#.##
###/.../#.. => ##.#/..##/.#.#/##..
.##/#../#.. => ####/#..#/.#.#/...#
###/#../#.. => .#.#/####/..##/.#.#
..#/.#./#.. => ##.#/.#../#.../.##.
#.#/.#./#.. => #..#/.#.#/#.#./#..#
.##/.#./#.. => #..#/..#./#.../...#
###/.#./#.. => #.##/.#../#.##/##.#
.##/##./#.. => .###/..../#..#/.##.
###/##./#.. => #.../.#.#/..#./.#..
#../..#/#.. => ..../##../#.../##.#
.#./..#/#.. => ..##/...#/###./##..
##./..#/#.. => .#.#/.###/...#/.#.#
#.#/..#/#.. => .#../..../.###/.##.
.##/..#/#.. => #.##/.##./.##./####
###/..#/#.. => #.../.#../..../#...
#../#.#/#.. => .#../.#.#/..##/###.
.#./#.#/#.. => ##.#/#.##/...#/#.##
##./#.#/#.. => .##./####/.#.#/.#..
..#/#.#/#.. => #.##/##.#/..#./.###
#.#/#.#/#.. => ###./.#../###./###.
.##/#.#/#.. => .#../.#../####/##.#
###/#.#/#.. => #.##/##.#/#.../##..
#../.##/#.. => ..#./.###/#.#./..#.
.#./.##/#.. => ##.#/##../..#./#...
##./.##/#.. => #.../..#./#.../.#..
#.#/.##/#.. => ..#./#.##/.##./####
.##/.##/#.. => #.#./.#../####/..##
###/.##/#.. => ...#/#..#/#.../.#..
#../###/#.. => ..../..../##.#/.##.
.#./###/#.. => ..##/..#./##../....
##./###/#.. => .#../..##/..../.#.#
..#/###/#.. => ...#/...#/..#./###.
#.#/###/#.. => ####/##.#/##../..##
.##/###/#.. => ..##/##../#..#/##..
###/###/#.. => ##.#/.##./...#/.#.#
.#./#.#/.#. => ###./####/.##./#..#
##./#.#/.#. => #.../..#./.##./##..
#.#/#.#/.#. => .##./####/##../.#.#
###/#.#/.#. => ##../..../.#.#/....
.#./###/.#. => ..##/##.#/.##./.#.#
##./###/.#. => #.../.#../..##/..#.
#.#/###/.#. => ####/.##./#..#/...#
###/###/.#. => ####/..../##.#/.#.#
#.#/..#/##. => ####/####/####/#...
###/..#/##. => #.#./####/##.#/####
.##/#.#/##. => .###/#.../#.../...#
###/#.#/##. => ..#./#.#./##../##.#
#.#/.##/##. => ###./###./#..#/.###
###/.##/##. => ##.#/..#./##../....
.##/###/##. => ##.#/###./.#.#/.##.
###/###/##. => #.##/.#.#/#..#/.##.
#.#/.../#.# => ..#./####/...#/#.##
###/.../#.# => .##./..#./####/#...
###/#../#.# => .##./##../..../###.
#.#/.#./#.# => #.##/#.##/#.##/#...
###/.#./#.# => ####/#.##/####/.###
###/##./#.# => .#.#/..../.#.#/#.##
#.#/#.#/#.# => ###./#.##/####/.###
###/#.#/#.# => .##./.##./.#.#/....
#.#/###/#.# => ##../..##/...#/.##.
###/###/#.# => .#../#.##/..##/.#..
###/#.#/### => ##.#/..#./...#/.###
###/###/### => ..##/###./.###/.###
